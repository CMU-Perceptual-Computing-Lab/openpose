#ifndef OPENPOSE_UTILITIES_RENDER_HU
#define OPENPOSE_UTILITIES_RENDER_HU

namespace op
{
    inline __device__ void renderKeypoints(float* targetPtr, float2* sharedMaxs, float2* sharedMins,
                                           float* sharedScaleF, const int globalIdx, const int x, const int y,
                                           const int targetWidth, const int targetHeight,
                                           const float* const keypointsPtr, const unsigned int* const partPairsPtr,
                                           const int numberPeople, const int numberParts, const int numberPartPairs,
                                           const float* const rgbColorsPtr, const int numberColors, const float radius,
                                           const float lineWidth, const float* const keypointScalePtr,
                                           const int numberScales, const float threshold,
                                           const float alphaColorToAdd, const bool blendOriginalFrame = true,
                                           const int googlyEye1 = -1, const int googlyEye2 = -1)
    {
        // Fill shared parameters
        if (globalIdx < numberPeople)
        {
            sharedMins[globalIdx].x = targetWidth;
            sharedMins[globalIdx].y = targetHeight;
            sharedMaxs[globalIdx].x = 0.f;
            sharedMaxs[globalIdx].y = 0.f;
            for (auto part = 0 ; part < numberParts ; part++)
            {
                const auto index = 3 * (globalIdx*numberParts + part);
                const auto x = keypointsPtr[index];
                const auto y = keypointsPtr[index+1];
                const auto score = keypointsPtr[index+2];
                if (score > threshold)
                {
                    if (x < sharedMins[globalIdx].x)
                        sharedMins[globalIdx].x = x;
                    if (x > sharedMaxs[globalIdx].x)
                        sharedMaxs[globalIdx].x = x;
                    if (y < sharedMins[globalIdx].y)
                        sharedMins[globalIdx].y = y;
                    if (y > sharedMaxs[globalIdx].y)
                        sharedMaxs[globalIdx].y = y;
                }
            }
            if (sharedMaxs[globalIdx].x != 0.f && sharedMaxs[globalIdx].y != 0.f)
            {
                const auto averageX = sharedMaxs[globalIdx].x - sharedMins[globalIdx].x;
                const auto averageY = sharedMaxs[globalIdx].y - sharedMins[globalIdx].y;
                // (averageX + averageY) / 2.f / 400.f
                sharedScaleF[globalIdx] = fastTruncate((averageX + averageY) / 400.f, 0.33f, 1.f);
                const auto constantToAdd = 50.f;
                sharedMaxs[globalIdx].x += constantToAdd;
                sharedMaxs[globalIdx].y += constantToAdd;
                sharedMins[globalIdx].x -= constantToAdd;
                sharedMins[globalIdx].y -= constantToAdd;
            }
        }

        __syncthreads();

        // Fill each (x,y) target pixel
        if (x < targetWidth && y < targetHeight)
        {
            const auto baseIndex = 3*(y * targetWidth + x);
            auto& b = targetPtr[baseIndex];
            auto& g = targetPtr[baseIndex+1];
            auto& r = targetPtr[baseIndex+2];
            if (!blendOriginalFrame)
            {
                b = 0.f;
                g = 0.f;
                r = 0.f;
            }

            const auto lineWidthSquared = lineWidth * lineWidth;
            const auto radiusSquared = radius * radius;
            for (auto person = 0; person < numberPeople; person++)
            {
                // Make sure person x,y in the limits
                // Make sure person is not empty. Assume all joints are below threshold. Then
                // maxs = 0 and mins = width/height. So if statement would be false
                if (x <= sharedMaxs[person].x && x >= sharedMins[person].x
                    && y <= sharedMaxs[person].y && y >= sharedMins[person].y)
                {
                    // Part pair connections
                    for (auto partPair = 0; partPair < numberPartPairs; partPair++)
                    {
                        const auto partA = partPairsPtr[2*partPair];
                        const auto partB = partPairsPtr[2*partPair+1];
                        const auto indexA = person*numberParts*3 + partA*3;
                        const auto xA = keypointsPtr[indexA];
                        const auto yA = keypointsPtr[indexA + 1];
                        const auto scoreA = keypointsPtr[indexA + 2];
                        const auto indexB = person*numberParts*3 + partB*3;
                        const auto xB = keypointsPtr[indexB];
                        const auto yB = keypointsPtr[indexB + 1];
                        const auto scoreB = keypointsPtr[indexB + 2];

                        if (scoreA > threshold && scoreB > threshold)
                        {
                            const auto keypointScale = keypointScalePtr[partB%numberScales]
                                                     * keypointScalePtr[partB%numberScales]
                                                     * keypointScalePtr[partB%numberScales];
                            const auto lineWidthScaled = lineWidthSquared * keypointScale;
                            const auto bSqrt = sharedScaleF[person] * sharedScaleF[person] * lineWidthScaled;

                            const auto xP = (xA + xB) / 2.f;
                            const auto yP = (yA + yB) / 2.f;
                            const auto aSqrt = (xA - xP) * (xA - xP) + (yA - yP) * (yA - yP);

                            const auto angle = atan2f(yB - yA, xB - xA);
                            const auto sine = sinf(angle);
                            const auto cosine = cosf(angle);
                            const auto A = cosine * (x - xP) + sine * (y - yP);
                            const auto B = sine * (x - xP) - cosine * (y - yP);

                            const auto judge = A * A / aSqrt + B * B / bSqrt;
                            const auto minV = 0.f;
                            const auto maxV = 1.f;
                            if (minV <= judge && judge <= maxV)
                                // Before used partPair vs partB
                                addColorWeighted(r, g, b, &rgbColorsPtr[(partB%numberColors)*3], alphaColorToAdd);
                        }
                    }

                    // Part circles
                    for (auto part = 0u; part < numberParts; part++)
                    {
                        const auto index = 3 * (person*numberParts + part);
                        const auto localX = keypointsPtr[index];
                        const auto localY = keypointsPtr[index + 1];
                        const auto score = keypointsPtr[index + 2];

                        if (score > threshold)
                        {
                            const auto keypointScale = keypointScalePtr[part%numberScales]
                                                     * keypointScalePtr[part%numberScales]
                                                     * keypointScalePtr[part%numberScales];
                            const auto radiusScaled = radiusSquared * keypointScale;
                            const auto dist2 = (x - localX) * (x - localX) + (y - localY) * (y - localY);
                            // Googly eyes
                            if (googlyEye1 == part || googlyEye2 == part)
                            {
                                const auto eyeRatio = 2.5f * sqrt(radiusScaled);
                                const auto minr2 = sharedScaleF[person] * sharedScaleF[person]
                                                 * (eyeRatio - 2) * (eyeRatio - 2);
                                const auto maxr2 = sharedScaleF[person] * sharedScaleF[person] * eyeRatio * eyeRatio;
                                if (dist2 <= maxr2)
                                {
                                    float colorToAdd [3] = {0., 0., 0.};
                                    if (dist2 <= minr2)
                                        for (auto& color : colorToAdd)
                                            color = {255.f};
                                    if (dist2 <= minr2*0.6f)
                                    {
                                        const auto dist3 = (x-4 - localX)
                                                         * (x-4 - localX) + (y - localY+4) * (y - localY+4);
                                        if (dist3 > 14.0625f) // 3.75f^2
                                            for (auto& color : colorToAdd)
                                                color = {0.f};
                                    }
                                    const auto alphaColorToAdd = 0.9f;
                                    addColorWeighted(r, g, b, colorToAdd, alphaColorToAdd);
                                }
                            }
                            // Other parts
                            else
                            {
                                const auto minr2 = 0.f;
                                const auto maxr2 = sharedScaleF[person] * sharedScaleF[person] * radiusScaled;
                                if (minr2 <= dist2 && dist2 <= maxr2)
                                    addColorWeighted(r, g, b, &rgbColorsPtr[(part%numberColors)*3], alphaColorToAdd);
                            }
                        }
                    }
                }
            }
        }
    }
}

#endif // OPENPOSE_UTILITIES_RENDER_HU
